[{"categories":["Computer Science"],"content":"计算机中，随机数都是由随机数生成器(Random Number Generator) 生成的 ","date":"2022-04-28","objectID":"/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%9A%8F%E6%9C%BA%E6%95%B0/:0:0","tags":["随机数"],"title":"计算机随机数","uri":"/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%9A%8F%E6%9C%BA%E6%95%B0/"},{"categories":["Computer Science"],"content":"伪随机数(Pseudo-Random Number) ","date":"2022-04-28","objectID":"/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%9A%8F%E6%9C%BA%E6%95%B0/:1:0","tags":["随机数"],"title":"计算机随机数","uri":"/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%9A%8F%E6%9C%BA%E6%95%B0/"},{"categories":["Computer Science"],"content":"弱伪随机数 特点是通过纯软件算法，按照一定的规律生成一个随机值。常用的方法是使用伪随机数生成器(PRNG) 伪随机数生成器(PRNG) 最基础的思想是均匀分布，最常用的算法就是线性同余法1 我们可以把这个伪随机数生成器看做是一个转换函数 f(x)，在生成的起始，我需要输入 x1 ，当输入这个 x1 后，我们就可以通过转换函数得到第一个随机数f(x1)。 接下来，我们再把f(x1) 输入f(x) 到中，那么我们就可以得到第二个随机数f(x2).一直下去，我们就可以得到一个伪随机序列。当然，上面的算法只是一个简单示例参考，实际的随机数生成程序还要复杂得多。有一点我们需要注意的是，对于这个伪随机数生成程序，我们发现主要我们初始x1输入的是一样的话，那么我们得到的随机序列就是相同的，而这个初始的x1其实就是我们的随机数种子(seed) 随机数种子(seed) 常用时间来生成，时间的变化终究有规律可循，所以弱伪随机数是有周期的 好的伪随机数生成器应具备以下特征： 相同序列的概率非常低 符合统计学的平均性，比如所有数字出现概率应该相同，卡方检验应该能通过，超长游程长度概略应该非常小，自相关应该只有一个尖峰，任何长度的同一数字之后别的数字出现概率应该仍然是相等的等等 不应该能够从一段序列猜测出随机数发生器的工作状态或者下一个随机数 不应该从随机数发生器的状态能猜测出随机数发生器以前的工作状态 线性同余法： 什么是线性同余法？ 线性同余法基于如下线性同余方程组： $ ax+by=m $ 用于产生均匀型伪随机数的线性同余生成器(与上面的方程符号没有对应关系) $ x_n=(ax_{n-1}+b)mod(m) $ 其中，a为\"乘数\"，b为\"增量\"，m为\"模数\",x0为\"种子数\" 如果产生的是区间实在(0,1)之间的，则只需要每个数都除以m即可，即取 $ \\xi_n=x_n/m $ 线性同余法产生均匀型伪随机数需要注意什么？ 种子数是在计算时随机给出的 决定伪随机数质量的是其余的三个参数，即a,b,m决定生成伪随机数的质量(质量指的是伪随机数序列的周期性) 一般b不为0。如果b为零，线性同余法变成了乘同余法2 高性能线性同余法参数取值要求？ 一般选取方法：乘数a满足$a=4p+1$；增量b满足$b=2q+1$。其中p，q为正整数 m值得话最好是选择大的，因为m值直接影响伪随机数序列的周期长短 a和b的值越大，产生的伪随机数越均匀 a和m如果互质，产生随机数效果比不互质好 ","date":"2022-04-28","objectID":"/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%9A%8F%E6%9C%BA%E6%95%B0/:1:1","tags":["随机数"],"title":"计算机随机数","uri":"/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%9A%8F%E6%9C%BA%E6%95%B0/"},{"categories":["Computer Science"],"content":"强伪随机数 顾名思义，该类随机数具有更强的随机数特性，能够满足随机性和不可推测特性。例如通过获取敲击键盘的数据作为随机数种子进而生成一组强伪随机数，因为击打键盘存在不确定性，所以生成的随机数也更接近与真正的随机数 ","date":"2022-04-28","objectID":"/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%9A%8F%E6%9C%BA%E6%95%B0/:1:2","tags":["随机数"],"title":"计算机随机数","uri":"/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%9A%8F%E6%9C%BA%E6%95%B0/"},{"categories":["Computer Science"],"content":"真随机数(TRUE Random Number) 同时具备随机性、不可推测和不可重复这 3 个基本特点。真随机数的生成是基于物理现象完成的，例如掷骰子、抛硬币等等。 硬件随机数生成器(HRNG)/真随机数生成器(TRNG) 通常是通过放大电路的热噪声来产生随机数 ","date":"2022-04-28","objectID":"/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%9A%8F%E6%9C%BA%E6%95%B0/:2:0","tags":["随机数"],"title":"计算机随机数","uri":"/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%9A%8F%E6%9C%BA%E6%95%B0/"},{"categories":["Computer Science"],"content":"准随机数(Quasi-Random Number) 准随机数发生器(QRNG) 产生高度均匀的单位超立方体样本 产生均匀型伪随机数的算法 ↩︎ 也是最常用的均匀型伪随机数发生器 ↩︎ ","date":"2022-04-28","objectID":"/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%9A%8F%E6%9C%BA%E6%95%B0/:3:0","tags":["随机数"],"title":"计算机随机数","uri":"/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%9A%8F%E6%9C%BA%E6%95%B0/"},{"categories":["Computer Science"],"content":"进程 进程就是上下文切换之间的程序执行的部分。是运行中的程序的描述，也是对应于该段CPU执行时间的描述 在软件编码方面，我们说的进程，其实是稍不同的，编程语言中创建的进程是一个无限loop，对应的是tcb块。这个是操作系统进行调度的单位。所以和上面的cpu执行时间段还是不同的 进程，与之相关的东东有寻址空间，寄存器组，堆栈空间等。即不同的进程，这些东东都不同，从而能相互区别 ","date":"2022-04-28","objectID":"/posts/%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B/:1:0","tags":["进程","线程"],"title":"进程和线程","uri":"/posts/%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B/"},{"categories":["Computer Science"],"content":"线程 线程是共享了进程的上下文环境，的更为细小的CPU时间段。线程主要共享的是进程的地址空间 ","date":"2022-04-28","objectID":"/posts/%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B/:2:0","tags":["进程","线程"],"title":"进程和线程","uri":"/posts/%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B/"},{"categories":["Computer Science"],"content":"对编码规则的需求： 在计算机中，所有的数据在存储和运算时都要使用二进制数表示，需要制定一套编码规则约定具体的二进制数代表具体的字符 ","date":"2022-04-28","objectID":"/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BC%96%E7%A0%81/:0:0","tags":["计算机编码"],"title":"计算机编码","uri":"/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BC%96%E7%A0%81/"},{"categories":["Computer Science"],"content":"标准ASCII(American Standard Code for Information Interchange)(0~127 7bit) 被 ISO (International Organization for Standardization)定为国际标准 早期ASCII只能使用128个字符，表示所有的大写和小写字母，数字 0 到 9、标点符号，以及在美式英语中使用的特殊控制字符 规则： 0~9\u003cA~Z\u003ca~z 同个字母的大写字母比小写字母要小32 ","date":"2022-04-28","objectID":"/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BC%96%E7%A0%81/:1:0","tags":["计算机编码"],"title":"计算机编码","uri":"/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BC%96%E7%A0%81/"},{"categories":["Computer Science"],"content":"扩展ASCII码(Extended ASCII)(0~255 8bit) 欧洲人128个字符的字符集不够用，拓展到256个字符的字符集 ","date":"2022-04-28","objectID":"/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BC%96%E7%A0%81/:2:0","tags":["计算机编码"],"title":"计算机编码","uri":"/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BC%96%E7%A0%81/"},{"categories":["Computer Science"],"content":"Unicode(Universal Multiple-Octet Coded Character Set,UCS) 它为每种语言中的每个字符设定了统一并且唯一的二进制编码，以满足跨语言、跨平台进行文本转换、处理的需求 UTF-8(8位元，UCS Transfer Format) 是针对Unicode的一种可变长度字符编码,可以用来表示Unicode标准中的任何字符，而且其编码中的第一个字节仍与ASCII相容 UTF-16(16位元) UTF-16比起UTF-8，好处在于大部分字符都以固定长度的字节（2字节）储存，但UTF-16却无法兼容于ASCII编码。 ","date":"2022-04-28","objectID":"/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BC%96%E7%A0%81/:3:0","tags":["计算机编码"],"title":"计算机编码","uri":"/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BC%96%E7%A0%81/"},{"categories":["Computer Science"],"content":"GB2312(信息交换用汉字编码字符集·基本集) 共收录 6763 个汉字，其中一级汉字 3755 个，二级汉字 3008 个；同时收录了包括拉丁字母、希腊字母、日文平假名及片假名字母、俄语西里尔字母在内的 682 个字符 对于人名、繁体字等方面出现的生僻字，GB 2312 不能处理，这导致了后来 GBK 及 GB 18030 汉字字符集的出现 对任意一个图形字符都采用两个字节表示 ","date":"2022-04-28","objectID":"/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BC%96%E7%A0%81/:4:0","tags":["计算机编码"],"title":"计算机编码","uri":"/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BC%96%E7%A0%81/"},{"categories":["Computer Science"],"content":"GBK(Chinese Internal Code Specification) 汉字内码扩展规范，K 为汉语拼音 Kuo Zhan（扩展）中“扩”字的声母 GBK 共收入 21886 个汉字和图形符号，包括： GB 2312 中的全部汉字、非汉字符号 BIG5 中的全部汉字 与 ISO 10646 相应的国家标准 GB 13000 中的其它 CJK 汉字，以上合计 20902 个汉字 其它汉字、部首、符号，共计 984 个 GBK 向下与 GB 2312 完全兼容，向上支持 ISO 10646 国际标准 GBK 采用双字节表示 ","date":"2022-04-28","objectID":"/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BC%96%E7%A0%81/:5:0","tags":["计算机编码"],"title":"计算机编码","uri":"/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BC%96%E7%A0%81/"},{"categories":["Computer Science"],"content":"GB18030(国家标准 GB 18030-2005《信息技术中文编码字符集》) GB 18030 与 GB 2312-1980 和 GBK 兼容，共收录汉字70244个 与 UTF-8 相同，采用多字节编码，每个字可以由 1 个、2 个或 4 个字节组成 编码空间庞大，最多可定义 161 万个字符 支持中国国内少数民族的文字，不需要动用造字区 汉字收录范围包含繁体汉字以及日韩汉字 GB 18030 编码是一二四字节变长编码 ","date":"2022-04-28","objectID":"/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BC%96%E7%A0%81/:6:0","tags":["计算机编码"],"title":"计算机编码","uri":"/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BC%96%E7%A0%81/"},{"categories":["Python"],"content":"Python 3 中有两种内置集合类型，set 和 frozenset ","date":"2022-04-28","objectID":"/posts/9.%E9%9B%86%E5%90%88set/:0:0","tags":["集合"],"title":"9.集合Set","uri":"/posts/9.%E9%9B%86%E5%90%88set/"},{"categories":["Python"],"content":"集合Set 格式： 使用花括号：{value01,value02,...} 使用集合推导式：{c for c in 'abracadabra' if c not in 'abc'} 使用类型构造器：set()，set(iterable) 补充说明： 集合中的重复元素会被删除 \u003e\u003e\u003e set1 = {1,2,3,1,2,3,3,3} \u003e\u003e\u003e set1 {1, 2, 3} 集合中的元素数据类型可以不相同，但必须是可哈希的(hashable) 可哈希的(hashable)：不可变，如字符串、元组等，不能对元素修改 不可哈希的(unhashable)：可变，如列表、字典等，能对元素修改 \u003e\u003e\u003e set1 = {1,2,3,'Hello World',(7,8,9)} \u003e\u003e\u003e set1 {1, 2, 3, (7, 8, 9), 'Hello World'} 集合是无序的，不支持索引、切片 集合是不可哈希的(unhashable)，无法成为其他集合的元素，能对元素进行修改 ","date":"2022-04-28","objectID":"/posts/9.%E9%9B%86%E5%90%88set/:1:0","tags":["集合"],"title":"9.集合Set","uri":"/posts/9.%E9%9B%86%E5%90%88set/"},{"categories":["Python"],"content":"迭代 格式：for x in {1,2,3}:print(x,end=\" \") ","date":"2022-04-28","objectID":"/posts/9.%E9%9B%86%E5%90%88set/:1:1","tags":["集合"],"title":"9.集合Set","uri":"/posts/9.%E9%9B%86%E5%90%88set/"},{"categories":["Python"],"content":"运算符 set - other - ... #返回一个新集合，其中包含原集合中在 others 指定的其他集合中不存在的元素 set | other | ... #返回一个新集合，其中包含来自原集合以及 others 指定的所有集合中的元素 set \u0026 other \u0026 ... #返回一个新集合，其中包含原集合以及 others 指定的所有集合中共有的元素 set ^ other #返回一个新集合，其中的元素或属于原集合或属于 other 指定的其他集合，但不能同时属于两者 set \u003c= other #检测是否集合中的每个元素都在 other 之中 set \u003c other #检测集合是否为 other 的真子集，即 set \u003c= other and set != other set \u003e= other #检测是否 other 中的每个元素都在集合之中 set \u003e other #检测集合是否为 other 的真超集，即 set \u003e= other and set != other in #成员运算符，如果集合中包含给定的值返回 True not in #成员运算符，如果集合中不包含给定的值返回 True \u003e\u003e\u003e a = set('abracadabra') \u003e\u003e\u003e b = set('alacazam') \u003e\u003e\u003e a {'d', 'a', 'c', 'r', 'b'} \u003e\u003e\u003e b {'a', 'c', 'l', 'm', 'z'} \u003e\u003e\u003e a - b {'d', 'b', 'r'} \u003e\u003e\u003e a | b {'d', 'a', 'c', 'b', 'r', 'l', 'm', 'z'} \u003e\u003e\u003e a \u0026 b {'c', 'a'} \u003e\u003e\u003e a ^ b {'d', 'b', 'm', 'r', 'z', 'l'} ","date":"2022-04-28","objectID":"/posts/9.%E9%9B%86%E5%90%88set/:1:2","tags":["集合"],"title":"9.集合Set","uri":"/posts/9.%E9%9B%86%E5%90%88set/"},{"categories":["Python"],"content":"支持Set的函数 len(set1) #返回Set1的元素个数 max(set1) #返回Set1的元素最大值 min(set1) #返回Set1的元素最小值 set(iterable) #将可迭代对象iterable转换为Set，并返回该Set ","date":"2022-04-28","objectID":"/posts/9.%E9%9B%86%E5%90%88set/:1:3","tags":["集合"],"title":"9.集合Set","uri":"/posts/9.%E9%9B%86%E5%90%88set/"},{"categories":["Python"],"content":"Set的方法 set.add(object) #添加一个元素到集合中，如果该元素已经存在，则不进行操作 set.clear() #清空集合 set.copy() #返回集合的复制 set.difference(iterable[,iterable,...]) #返回该集合中不存在于其他可迭代对象iterable中的元素的集合 set.difference_update(iterable[,iterable,...]) #移除该集合中存在于其他可迭代对象iterable中的元素 set.discard(object) #删除该集合中的对象object，如果该集合中不存在对象object，则不进行操作 set.intersection(iterable[,iterable,...]) #返回该集合与其他可迭代对象iterable的交集，如果参数有Str，则交集为空集 set.intersection_update(iterable[,iterable,...]) #使用该集合与其他可迭代对象iterable的交集更新该集合 set.isdisjoint(iterable) #如果该集合与可迭代对象iterable的交集为空返回True，否则返回False set.issubset(iterable) #如果该集合是可迭代对象iterable的子集，返回True，否则返回False set.issuperset(iterable) #如果该集合是可迭代对象iterable的超集，返回True，否则返回False set.pop() #删除一个元素 set.remove(object) #删除该集合中的一个对象object，如果不存在该对象，则报错KeyError set.symmetric_difference(iterable) #返回该集合与可迭代对象iterable不同时存在的元素的集合 set.symmetric_difference_update(iterable) #使用该集合与可迭代对象iterable不同时存在的元素的集合更新该集合 set.union(iterable[,iterable,...]) #返回该集合与其他可迭代对象iterable的并集 set.update(iterable[,iterable,...]) #使用该集合与其他可迭代对象iterable的并集更新该集合 ","date":"2022-04-28","objectID":"/posts/9.%E9%9B%86%E5%90%88set/:1:4","tags":["集合"],"title":"9.集合Set","uri":"/posts/9.%E9%9B%86%E5%90%88set/"},{"categories":["Python"],"content":"冻结集合Frozenset 格式： 使用类型构造器：frozenset()，forzenset(iterable) 补充说明： 冻结集合是可哈希的(hashable)，可以成为其他集合的元素，不能对元素进行修改 ","date":"2022-04-28","objectID":"/posts/9.%E9%9B%86%E5%90%88set/:2:0","tags":["集合"],"title":"9.集合Set","uri":"/posts/9.%E9%9B%86%E5%90%88set/"},{"categories":["Python"],"content":"格式： 空元组() 含有元素的元组： 带括号：(a,)，(a,b,c,d,...) 不带括号：a,，a,b,c,d,... 补充说明： 定义含有一个元素的带括号的元组，应当在元素后面加,,以区分变量 = (值或表达式)把()作为运算符的定义方式 \u003e\u003e\u003e tuple1 = (20) \u003e\u003e\u003e tuple1 20 \u003e\u003e\u003e type(tuple1) \u003cclass 'int'\u003e \u003e\u003e\u003e tuple2 = (20,) \u003e\u003e\u003e tuple2 (20,) \u003e\u003e\u003e type(tuple2) \u003cclass 'tuple'\u003e 元组中的元素不能被修改，但是可以修改其中的可变序列对象中的元素 \u003e\u003e\u003e tuple1 = 1,2,3,[4,5,6] \u003e\u003e\u003e tuple1[3][0] = 9 \u003e\u003e\u003e tuple1 (1, 2, 3, [9, 5, 6]) 元组中的元素数据类型可以不相同 \u003e\u003e\u003e tuple1 = (1,2,3,'1') \u003e\u003e\u003e list1 = ['Hello',7,8,9] \u003e\u003e\u003e str1 = 'World' \u003e\u003e\u003e tuple2 = (4,5,6,tuple1,str1,list1) \u003e\u003e\u003e tuple2 (4, 5, 6, (1, 2, 3, '1'), 'World', ['Hello', 7, 8, 9]) ","date":"2022-04-28","objectID":"/posts/8.%E5%85%83%E7%BB%84tuple/:0:0","tags":["元组"],"title":"8.元组Tuple","uri":"/posts/8.%E5%85%83%E7%BB%84tuple/"},{"categories":["Python"],"content":"索引 格式：变量[下标] 索引方式： 从左往右以0开始 从右往左以-1开始 取值：不能越界 ","date":"2022-04-28","objectID":"/posts/8.%E5%85%83%E7%BB%84tuple/:1:0","tags":["元组"],"title":"8.元组Tuple","uri":"/posts/8.%E5%85%83%E7%BB%84tuple/"},{"categories":["Python"],"content":"截取(切片) 格式：变量[start:stop[:step]] 取值： 取值区间左闭右开，会自动处理越界索引 step默认值为1，为正顺序，为负逆序 ","date":"2022-04-28","objectID":"/posts/8.%E5%85%83%E7%BB%84tuple/:2:0","tags":["元组"],"title":"8.元组Tuple","uri":"/posts/8.%E5%85%83%E7%BB%84tuple/"},{"categories":["Python"],"content":"迭代 格式：for x in (1,2,3):print(x,end=\" \") ","date":"2022-04-28","objectID":"/posts/8.%E5%85%83%E7%BB%84tuple/:3:0","tags":["元组"],"title":"8.元组Tuple","uri":"/posts/8.%E5%85%83%E7%BB%84tuple/"},{"categories":["Python"],"content":"运算符 + #元组连接 * #重复元组为一个元组 [] #通过索引获取值 [:] #截取元组，左闭右开 in #成员运算符，如果元组中包含给定的值返回 True not in #成员运算符，如果元组中不包含给定的值返回 True ","date":"2022-04-28","objectID":"/posts/8.%E5%85%83%E7%BB%84tuple/:4:0","tags":["元组"],"title":"8.元组Tuple","uri":"/posts/8.%E5%85%83%E7%BB%84tuple/"},{"categories":["Python"],"content":"支持Tuple的函数 len(tuple1) #返回Tuple1的元素个数 max(tuple1) #返回Tuple1的元素最大值 min(tuple1) #返回Tuple1的元素最小值 tuple(iterable) #将可迭代对象iterable转换为Tuple，并返回该Tuple ","date":"2022-04-28","objectID":"/posts/8.%E5%85%83%E7%BB%84tuple/:5:0","tags":["元组"],"title":"8.元组Tuple","uri":"/posts/8.%E5%85%83%E7%BB%84tuple/"},{"categories":["Python"],"content":"Tuple的方法 tuple.count(obj) #返回对象obj在元组中的个数 tuple.index(obj[,start[,stop]]) #返回对象obj在元组中的第一个索引，可指定位置 ","date":"2022-04-28","objectID":"/posts/8.%E5%85%83%E7%BB%84tuple/:6:0","tags":["元组"],"title":"8.元组Tuple","uri":"/posts/8.%E5%85%83%E7%BB%84tuple/"},{"categories":["Python"],"content":"格式： 空列表：[] 含有元素的列表：[a]，[a,b,c,d,...] 补充说明： 列表中元素的数据类型可以不相同 \u003e\u003e\u003e list1 = [4,'Runoob'] \u003e\u003e\u003e list2 = [1,2,3,'Hello','World',12.0,3+4j,list] \u003e\u003e\u003e list2 [1, 2, 3, 'Hello', 'World', 12.0, (3+4j), [4, 'Runoob']] \u003e\u003e\u003e list2[7][1] 'Runoob' List中的元素是可以改变的 \u003e\u003e\u003e list1 = [1,2,3,4,5,6] \u003e\u003e\u003e list1[0] = 9 \u003e\u003e\u003e list1[2:4] = [] \u003e\u003e\u003e list1 [9, 2, 5, 6] \u003e\u003e\u003e del list1[0] \u003e\u003e\u003e list1 [2, 5, 6] ","date":"2022-04-28","objectID":"/posts/7.%E5%88%97%E8%A1%A8list/:0:0","tags":["列表"],"title":"7.列表List","uri":"/posts/7.%E5%88%97%E8%A1%A8list/"},{"categories":["Python"],"content":"索引 格式：变量[下标] 索引方式： 从左往右以0开始 从右往左以-1开始 取值：不能越界 ","date":"2022-04-28","objectID":"/posts/7.%E5%88%97%E8%A1%A8list/:1:0","tags":["列表"],"title":"7.列表List","uri":"/posts/7.%E5%88%97%E8%A1%A8list/"},{"categories":["Python"],"content":"截取(切片) 格式：变量[start:stop[:step]] 取值： 取值区间左闭右开，会自动处理越界索引 step默认值为1，为正顺序，为负逆序 ","date":"2022-04-28","objectID":"/posts/7.%E5%88%97%E8%A1%A8list/:2:0","tags":["列表"],"title":"7.列表List","uri":"/posts/7.%E5%88%97%E8%A1%A8list/"},{"categories":["Python"],"content":"迭代 格式：for x in [1,2,3]:print(x,end=\" \") ","date":"2022-04-28","objectID":"/posts/7.%E5%88%97%E8%A1%A8list/:3:0","tags":["列表"],"title":"7.列表List","uri":"/posts/7.%E5%88%97%E8%A1%A8list/"},{"categories":["Python"],"content":"运算符 + #列表连接 * #重复列表为一个列表 [] #通过索引获取值 [:] #截取列表，左闭右开 in #成员运算符，如果列表中包含给定的值返回 True not in #成员运算符，如果列表中不包含给定的值返回 True \u003e\u003e\u003e list1 = [[1,2,3]] \u003e\u003e\u003e list2 = [1,2,3]+[4,5,6]+list1 \u003e\u003e\u003e list2 [1, 2, 3, 4, 5, 6, [1, 2, 3]] \u003e\u003e\u003e list2 = list2*2 #元素中包含可变序列时，重复是对可变序列的引用 \u003e\u003e\u003e list2 [1, 2, 3, 4, 5, 6, [1, 2, 3], 1, 2, 3, 4, 5, 6, [1, 2, 3]] \u003e\u003e\u003e list2[6][1] = 4 #当元素中的可变序列中的元素被修改时，引用会一起被修改 \u003e\u003e\u003e list2 [1, 2, 3, 4, 5, 6, [1, 4, 3], 1, 2, 3, 4, 5, 6, [1, 4, 3]] ","date":"2022-04-28","objectID":"/posts/7.%E5%88%97%E8%A1%A8list/:4:0","tags":["列表"],"title":"7.列表List","uri":"/posts/7.%E5%88%97%E8%A1%A8list/"},{"categories":["Python"],"content":"支持List的函数 len(list1) #返回list1的元素个数 max(list1) #返回list1的元素最大值 min(list1) #返回list1的元素最小值 list(iterable) #将可迭代对象iterable转换为List，并返回该List ","date":"2022-04-28","objectID":"/posts/7.%E5%88%97%E8%A1%A8list/:5:0","tags":["列表"],"title":"7.列表List","uri":"/posts/7.%E5%88%97%E8%A1%A8list/"},{"categories":["Python"],"content":"List的方法 list.sort([key=None],[reverse=False])解析： key：指定带有一个参数的函数，用于从每个列表元素中提取比较键(例如key=str.lower)。默认值为None(直接比较元素) reverse：排序规则，reverse = True降序，reverse = False升序(默认) list.append(obj) #在列表末尾添加一个新的对象 list.count(obj) #返回对象在列表中出现的次数 list.extend(seq) #在列表末尾追加一个序列中的元素 list.index(x[,start[,end]]) #返回从列表中找出x第一个匹配项的索引位置 list.insert(index,obj) #将指定对象插入列表的指定位置 list.pop([index]) #删除列表中指定位置的元素(默认index=-1)，并返回被删除的元素 list.remove(obj) #移除列表中某个值的第一个匹配项 list.reverse() #反向列表中元素 list.sort([key=None],[reverse=False]) #对原列表进行排序 list.clear() #清空列表 list.copy() #复制列表 \u003e\u003e\u003e list1 = [1,2,3,4,1,2,3,4] \u003e\u003e\u003e list2 = ['Hello','World'] \u003e\u003e\u003e list1.append(list2) \u003e\u003e\u003e list1 [1, 2, 3, 4, 1, 2, 3, 4, ['Hello', 'World']] \u003e\u003e\u003e list1.count(1) 2 \u003e\u003e\u003e list1.extend(list2) \u003e\u003e\u003e list1 [1, 2, 3, 4, 1, 2, 3, 4, ['Hello', 'World'], 'Hello', 'World'] \u003e\u003e\u003e list1.index(1) 0 \u003e\u003e\u003e list1.insert(3,5) \u003e\u003e\u003e list1 [1, 2, 3, 5, 4, 1, 2, 3, 4, ['Hello', 'World'], 'Hello', 'World'] \u003e\u003e\u003e list1.pop() 'World' \u003e\u003e\u003e list1 [1, 2, 3, 5, 4, 1, 2, 3, 4, ['Hello', 'World'], 'Hello'] \u003e\u003e\u003e list1.pop(3) 5 \u003e\u003e\u003e list1 [1, 2, 3, 4, 1, 2, 3, 4, ['Hello', 'World'], 'Hello'] \u003e\u003e\u003e list1.remove(1) \u003e\u003e\u003e list1 [2, 3, 4, 1, 2, 3, 4, ['Hello', 'World'], 'Hello'] \u003e\u003e\u003e list1.reverse() \u003e\u003e\u003e list1 ['Hello', ['Hello', 'World'], 4, 3, 2, 1, 4, 3, 2] \u003e\u003e\u003e list2.sort(reverse=True) \u003e\u003e\u003e list2 ['World', 'Hello'] \u003e\u003e\u003e list1.clear() \u003e\u003e\u003e list1 [] \u003e\u003e\u003e list1 = list2.copy() \u003e\u003e\u003e list1 ['World', 'Hello'] ","date":"2022-04-28","objectID":"/posts/7.%E5%88%97%E8%A1%A8list/:6:0","tags":["列表"],"title":"7.列表List","uri":"/posts/7.%E5%88%97%E8%A1%A8list/"},{"categories":["Python"],"content":"格式： 单引号：'允许包含有 \"双\" 引号' 双引号：\"允许包含有 '单' 引号\" 三重引号：'''三重单引号'''，\"\"\"三重双引号\"\"\" 补充说明： Python 没有单独的字符类型，一个字符就是长度为 1 的字符串 Python 中单引号 ’ 和双引号 \" 使用完全相同 按字面意义级联字符串，如\"this \"\"is \"\"string\"会被自动转换为this is string 使用三引号 ( ’’’ 或 \"\"\" ) 可以指定一个多行字符串 \u003e\u003e\u003e str1 = \"\"\"这是一个 ... 多行字符串\"\"\" \u003e\u003e\u003e print(str1) 这是一个 多行字符串 Python 中的字符串不能被修改，向一个索引位置赋值，比如word[0] = 'm'会导致错误 ","date":"2022-04-28","objectID":"/posts/6.%E5%AD%97%E7%AC%A6%E4%B8%B2string/:0:0","tags":["字符串"],"title":"6.字符串String","uri":"/posts/6.%E5%AD%97%E7%AC%A6%E4%B8%B2string/"},{"categories":["Python"],"content":"编码 在 Python 3 中，所有的字符串默认都是 Unicode 字符串 ","date":"2022-04-28","objectID":"/posts/6.%E5%AD%97%E7%AC%A6%E4%B8%B2string/:1:0","tags":["字符串"],"title":"6.字符串String","uri":"/posts/6.%E5%AD%97%E7%AC%A6%E4%B8%B2string/"},{"categories":["Python"],"content":"转义字符 \\\\ #反斜杠 \\' #单引号 \\\" #双引号 \\a #响铃 \\b #退格 \\000 #空 \\n #换行 \\v #纵向制表符 \\t #横向制表符 \\r #回车，将 \\r 后面的内容移到字符串开头，并逐一替换开头部分的字符，直至将 \\r 后面的内容完全替换完成 \\f #换页 \\ooo #八进制值 \\xhh #十六进制值 ","date":"2022-04-28","objectID":"/posts/6.%E5%AD%97%E7%AC%A6%E4%B8%B2string/:2:0","tags":["字符串"],"title":"6.字符串String","uri":"/posts/6.%E5%AD%97%E7%AC%A6%E4%B8%B2string/"},{"categories":["Python"],"content":"原始字符r/R 使用 r/R 可以让反斜杠 \\ 不发生转义 \u003e\u003e\u003e str1 = 'Ru\\noob' \u003e\u003e\u003e print(str1) Ru oob \u003e\u003e\u003e str2 = r\"Ru\\noob\" \u003e\u003e\u003e str3 = R\"Ru\\noob\" \u003e\u003e\u003e print(str2) Ru\\noob \u003e\u003e\u003e print(str3) Ru\\noob ","date":"2022-04-28","objectID":"/posts/6.%E5%AD%97%E7%AC%A6%E4%B8%B2string/:3:0","tags":["字符串"],"title":"6.字符串String","uri":"/posts/6.%E5%AD%97%E7%AC%A6%E4%B8%B2string/"},{"categories":["Python"],"content":"索引 格式：变量[下标] 索引方式： 从左往右以0开始 从右往左以-1开始 取值：不能越界 ","date":"2022-04-28","objectID":"/posts/6.%E5%AD%97%E7%AC%A6%E4%B8%B2string/:4:0","tags":["字符串"],"title":"6.字符串String","uri":"/posts/6.%E5%AD%97%E7%AC%A6%E4%B8%B2string/"},{"categories":["Python"],"content":"截取(切片) 格式：变量[start:stop[:step]] 取值： 取值区间左闭右开，会自动处理越界索引 step默认值为1，为正顺序，为负逆序 \u003e\u003e\u003e str1 = 'HelloWorld' \u003e\u003e\u003e print(str1) #打印str1 HelloWorld \u003e\u003e\u003e print(str1[2:-2]) #打印从第三个到倒数第三个字符的字符串 lloWor \u003e\u003e\u003e print(str1[2:]) #打印从第三个到结束的字符串 lloWorld \u003e\u003e\u003e print(str1[2:5]) #打印从第三个到第五个字符的字符串 llo \u003e\u003e\u003e print(str1[2:-2:2]) #以步长2顺序打印从第三个到倒数第三个的字符串 loo \u003e\u003e\u003e str1[:12] #截取到下标12的字符串 'HelloWorld' \u003e\u003e\u003e str1[-12:] #截取下标-12到结束的字符串 'HelloWorld' \u003e\u003e\u003e str1[::-1] #以步长-1逆序截取整个字符串 'dlroWolleH' \u003e\u003e\u003e str1[0:12:-1] #以步长-1逆序截取下标0到下标12的字符串 '' \u003e\u003e\u003e str1[0::-1] #以步长-1逆序截取下标0到结束的字符串 'H' \u003e\u003e\u003e str1[-1::-1] #以步长-1逆序截取下标-1到结束的字符串 'dlroWolleH' \u003e\u003e\u003e str1[-1:-12:-1] #以步长-1逆序截取下标-1到下标-12的字符串 'dlroWolleH' ","date":"2022-04-28","objectID":"/posts/6.%E5%AD%97%E7%AC%A6%E4%B8%B2string/:5:0","tags":["字符串"],"title":"6.字符串String","uri":"/posts/6.%E5%AD%97%E7%AC%A6%E4%B8%B2string/"},{"categories":["Python"],"content":"迭代 格式：for x in 'HelloWorld':print(x,end=\" \") ","date":"2022-04-28","objectID":"/posts/6.%E5%AD%97%E7%AC%A6%E4%B8%B2string/:6:0","tags":["字符串"],"title":"6.字符串String","uri":"/posts/6.%E5%AD%97%E7%AC%A6%E4%B8%B2string/"},{"categories":["Python"],"content":"f-string f-string是 python3.6 之后版本添加的，称之为字面量格式化字符串，是新的格式化字符串的语法 \u003e\u003e\u003e str1 = \"World\" #替换字符串 \u003e\u003e\u003e f'Hello {str1}' Hello World \u003e\u003e\u003e f'{1+2}' #使用表达式 3 在 Python 3.8 的版本中可以使用 = 符号来拼接运算表达式与结果： \u003e\u003e\u003e f'{1+2=}' 1+2=3 ","date":"2022-04-28","objectID":"/posts/6.%E5%AD%97%E7%AC%A6%E4%B8%B2string/:7:0","tags":["字符串"],"title":"6.字符串String","uri":"/posts/6.%E5%AD%97%E7%AC%A6%E4%B8%B2string/"},{"categories":["Python"],"content":"运算符 + #字符串连接 * #重复字符串为一个字符串 [] #通过索引获取字符 [:] #截取字符串，左闭右开 in #成员运算符，如果字符串中包含给定的字符返回 True not in #成员运算符，如果字符串中不包含给定的字符返回 True r/R #原始字符串 % #格式字符串 \u003e\u003e\u003e str1 = 'Hello' \u003e\u003e\u003e str2 = 'World' \u003e\u003e\u003e newstr = str1+str2 \u003e\u003e\u003e newstr1 = newstr*2 \u003e\u003e\u003e print(newstr) HelloWorld \u003e\u003e\u003e print(newstr1) HelloWorldHelloWorld \u003e\u003e\u003e print('H' in str1) True \u003e\u003e\u003e print('a' not in str1) True ","date":"2022-04-28","objectID":"/posts/6.%E5%AD%97%E7%AC%A6%E4%B8%B2string/:8:0","tags":["字符串"],"title":"6.字符串String","uri":"/posts/6.%E5%AD%97%E7%AC%A6%E4%B8%B2string/"},{"categories":["Python"],"content":"支持String的函数 len(str1) #返回str1的元素个数 max(str1) #返回str1的元素最大值 min(str1) #返回str1的元素最小值 str(object) #将对象object的打印转换为String，并返回该String ","date":"2022-04-28","objectID":"/posts/6.%E5%AD%97%E7%AC%A6%E4%B8%B2string/:9:0","tags":["字符串"],"title":"6.字符串String","uri":"/posts/6.%E5%AD%97%E7%AC%A6%E4%B8%B2string/"},{"categories":["Python"],"content":"String的方法 encode()与decode()解析： 在Python中，str 表示字符串，bytes 表示字节串。str 类型和 bytes 类型之间转换需要使用encode()和decode()方法 encode()语法： str.encode([encoding=\"utf-8\"][,errors=\"strict\"]) decode()语法： bytes.decode([encoding=\"utf-8\"][,errors=\"strict\"]) errors取值： strict：遇到无法编码的字符就抛出异常，默认取值为strict ignore：忽略无法编码的字符 replace：用“？”替换无法编码的字符 xmlcharrefreplace：用xml字符替换无法编码的字符 backslashreplace：使用反斜杠代替无法编码的字符 namereplace：用说明字符的文本替换无法编码的字符 \u003e\u003e\u003e str1 = 'heLLOWorld' \u003e\u003e\u003e print(str1.capitalize()) #将字符串的首字符进行大写，其余小写 Helloworld \u003e\u003e\u003e print(str1.center(20,'*')) #返回一个指定的宽度 width 居中的字符串，fillchar 为填充的字符，默认为空格 *****heLLOWorld***** \u003e\u003e\u003e print(str1.center(1)) #width小于原字符串，将返回原字符串 heLLOWorld \u003e\u003e\u003e substr = \"Wo\" \u003e\u003e\u003e print(str1.count('L')) #返回字符串在str中出现的次数 2 \u003e\u003e\u003e print(str1.count(substr,3)) #返回从第3个字符开始查找字符串在str中出现的次数 1 \u003e\u003e\u003e print(str1.count(substr,3,len(str1))) #返回字符串在设定字符串中出现的次数 1 str2 = \"中文字符串\" \u003e\u003e\u003e print(str2.encode()) #对str1进行默认utf-8编码，默认错误处理方式为strict \u003e\u003e\u003e print(str2.encode(\"GB2312\")) #对str1指定GB2312编码，默认错误处理方式为strict \u003e\u003e\u003e print(str2.encode(encoding=\"GBK\",errors=\"backslashreplace\")) #对str1指定GBK编码，错误处理方式为backslashreplace bytes = str2.encode() \u003e\u003e\u003e print(bytes.decode()) #对bytes进行默认utf-8解码，默认错误处理方式为strict \u003e\u003e\u003e print(bytes.decodeO(\"GB2312\")) #对bytes指定GB2312解码，默认错误处理方式为strict \u003e\u003e\u003e print(bytes.decode(encoding=\"GBK\",errors=\"backslashreplace\")) #对bytes指定GBK解码，错误处理方式为backslashreplace ","date":"2022-04-28","objectID":"/posts/6.%E5%AD%97%E7%AC%A6%E4%B8%B2string/:10:0","tags":["字符串"],"title":"6.字符串String","uri":"/posts/6.%E5%AD%97%E7%AC%A6%E4%B8%B2string/"},{"categories":["Python"],"content":"Python 3 的数值类型支持 int(整型)、float(浮点型)、bool(布尔型)、complex（复数） ","date":"2022-04-28","objectID":"/posts/5.%E6%95%B0%E5%AD%97%E7%B1%BB%E5%9E%8Bnumber/:0:0","tags":["数字类型"],"title":"5.数字类型Number","uri":"/posts/5.%E6%95%B0%E5%AD%97%E7%B1%BB%E5%9E%8Bnumber/"},{"categories":["Python"],"content":"Int整型 在Python 3 里，只有一种整数类型 int ，表示为长整型 ","date":"2022-04-28","objectID":"/posts/5.%E6%95%B0%E5%AD%97%E7%B1%BB%E5%9E%8Bnumber/:1:0","tags":["数字类型"],"title":"5.数字类型Number","uri":"/posts/5.%E6%95%B0%E5%AD%97%E7%B1%BB%E5%9E%8Bnumber/"},{"categories":["Python"],"content":"Bool布尔型 Python 3 中，bool 是 int 的子类，True 和 False 可以和数字相加，True==1、False==0 会返回 True，但可以通过 is 来判断类型 \u003e\u003e\u003e True+1 2 \u003e\u003e\u003e False+1 1 \u003e\u003e\u003e True==1 True \u003e\u003e\u003e False==0 True \u003e\u003e\u003e 1 is True \u003cstdin\u003e:1: SyntaxWarning: \"is\" with a literal. Did you mean \"==\"? False \u003e\u003e\u003e 0 is False \u003cstdin\u003e:1: SyntaxWarning: \"is\" with a literal. Did you mean \"==\"? False ","date":"2022-04-28","objectID":"/posts/5.%E6%95%B0%E5%AD%97%E7%B1%BB%E5%9E%8Bnumber/:2:0","tags":["数字类型"],"title":"5.数字类型Number","uri":"/posts/5.%E6%95%B0%E5%AD%97%E7%B1%BB%E5%9E%8Bnumber/"},{"categories":["Python"],"content":"数学运算 \u003e\u003e\u003e 17 % 3 #取余 2 \u003e\u003e\u003e 2 ** 5 #幂运算，2的5次方 32 隐式转换： 在混合计算时，Python会把较小的数据类型转换成为较大的数据类型 \u003e\u003e\u003e 17 % 3.0 2.0 \u003e\u003e\u003e 2 ** 5.0 32.0 在交互模式中，最后被输出的表达式结果被赋值给变量 _ 。此处，_ 变量应被用户视为只读变量 \u003e\u003e\u003e tax = 12.5 / 100 \u003e\u003e\u003e price = 100.50 \u003e\u003e\u003e price * tax 12.5625 \u003e\u003e\u003e price + _ 113.0625 \u003e\u003e\u003e round(_, 2) #四舍五入到第2位小数点 113.06 数值的除法包含两个运算符： / 返回一个浮点数 // 向下取整，返回一个整数。// 得到的并不一定是整数类型的数，它与分母分子的数据类型有关系 \u003e\u003e\u003e 7/2 3.5 \u003e\u003e\u003e 7//2 #向下取整，返回整数部分 3 \u003e\u003e\u003e 7.0//2 3.0 \u003e\u003e\u003e 7//2.0 3.0 \u003e\u003e\u003e 7.0//2.0 3.0 ","date":"2022-04-28","objectID":"/posts/5.%E6%95%B0%E5%AD%97%E7%B1%BB%E5%9E%8Bnumber/:3:0","tags":["数字类型"],"title":"5.数字类型Number","uri":"/posts/5.%E6%95%B0%E5%AD%97%E7%B1%BB%E5%9E%8Bnumber/"},{"categories":["Python"],"content":"数学常量 数学常量pi(π) \u003e\u003e\u003e import math \u003e\u003e\u003e print(math.pi) 3.141592653589793 数学常量e(自然常数) \u003e\u003e\u003e import math \u003e\u003e\u003e print(math.e) 2.718281828459045 ","date":"2022-04-28","objectID":"/posts/5.%E6%95%B0%E5%AD%97%E7%B1%BB%E5%9E%8Bnumber/:4:0","tags":["数字类型"],"title":"5.数字类型Number","uri":"/posts/5.%E6%95%B0%E5%AD%97%E7%B1%BB%E5%9E%8Bnumber/"},{"categories":["Python"],"content":"数字类型转换 int(x)将 x 转换为 int 类型 float(x)将 x 转换为 float 类型 complex(x)将 x 转换为实数为 x，虚数为 0 的复数 complex(x,y)返回实数为 x，虚数为 y 的复数 ","date":"2022-04-28","objectID":"/posts/5.%E6%95%B0%E5%AD%97%E7%B1%BB%E5%9E%8Bnumber/:5:0","tags":["数字类型"],"title":"5.数字类型Number","uri":"/posts/5.%E6%95%B0%E5%AD%97%E7%B1%BB%E5%9E%8Bnumber/"},{"categories":["Python"],"content":"数学函数 math.fabs()与abs()的区别： abs() 是内置函数，math.fabs()在 math 模块中定义 math.fabs() 只对浮点型跟整型数值有效，abs()还可以运用在复数中 pow()与math.pow()的区别： pow(x,y[,z])当z存在时，等效于pow(x,y)%z,对结果进行z取模 pow()会把参数作为整型，math.pow()会把参数转换为float round(x[,n])解析： n \u003e 0,四舍五入到第n位小数点 n = 0,四舍五入到最接近的整数 n \u003c 0,在小数点左侧进行四舍五入 abs(x) #绝对值 import math math.ceil(x) #向上取整 math.exp(x) #e的x次幂 math.fabs(x) #返回x的绝对值的浮点数类型 math.floor(x) #向下取整 math.log(x) #返回x的自然对数，x\u003e0 math.log10(x) #返回以10为基底的x的对数，x\u003e0 max(x1,x2,...) #最大值，参数可以为序列 min(x1,x2,...) #最小值，参数可以为序列 math.modf(x) #返回x的整数部分与小数部分，两部分的数值符号与 x 相同，整数部分以浮点型表示 round(x[,n]) #返回浮点数x的四舍五入值 math.sqrt(x) #返回x的平方根，返回值为浮点数 ","date":"2022-04-28","objectID":"/posts/5.%E6%95%B0%E5%AD%97%E7%B1%BB%E5%9E%8Bnumber/:6:0","tags":["数字类型"],"title":"5.数字类型Number","uri":"/posts/5.%E6%95%B0%E5%AD%97%E7%B1%BB%E5%9E%8Bnumber/"},{"categories":["Python"],"content":"随机数函数 randrange([start,] stop [,step])解析： start： 指定范围内的开始值，包含在范围内 stop： 指定范围内的结束值，不包含在范围内 step： 指定递增基数 randrange(10,100,3) #从[10,13,16,19,...)中返回一个随机数 import random random.choice(seq) #返回随机项，seq可以是一个列表，元组或字符串 random.randrange([start,] stop [,step]) #从给定的范围返回随机项 random.random() #在[0,1)的区间内随机返回一个实数 random.seed([x]) #改变随机数生成器的种子 random.shuffle(list) #对list进行随机排序 random.uniform(x,y) #返回一个浮点数 N，取值范围为如果 x \u003c y 则 x \u003c= N \u003c= y，如果 y \u003c x 则y \u003c= N \u003c= x ","date":"2022-04-28","objectID":"/posts/5.%E6%95%B0%E5%AD%97%E7%B1%BB%E5%9E%8Bnumber/:7:0","tags":["数字类型"],"title":"5.数字类型Number","uri":"/posts/5.%E6%95%B0%E5%AD%97%E7%B1%BB%E5%9E%8Bnumber/"},{"categories":["Python"],"content":"三角函数 degrees(x)与radians(x)解析： 角度和弧度关系是： 2π 弧度 = 360°。从而 1°≈0.0174533 弧度，1 弧度≈57.29578° 角度转换为弧度公式：弧度=角度÷180×π 弧度转换为角度公式：角度=弧度×180÷π import math math.acos(x) #返回x的反余弦弧度值，x取值[-1,1] math.asin(x) #返回x的反正弦弧度值，x取值[-1,1] math.atan(x) #返回x的反正切弧度值 math.atan2(x,y) #返回x,y坐标值的反正切值 math.cos(x) #返回x的弧度的余弦值，返回值为[-1,1] math.hypot(x,y) #返回欧几里德范数 sqrt(x*x + y*y) math.sin(x) #返回x的弧度的正弦值，返回值为[-1,1] math.tan(x) #返回x的弧度的正切值，返回值为[-1,1] math.degrees(x) #将弧度转换为角度 math.radians(x) #将角度转换为弧度 ","date":"2022-04-28","objectID":"/posts/5.%E6%95%B0%E5%AD%97%E7%B1%BB%E5%9E%8Bnumber/:8:0","tags":["数字类型"],"title":"5.数字类型Number","uri":"/posts/5.%E6%95%B0%E5%AD%97%E7%B1%BB%E5%9E%8Bnumber/"},{"categories":["Python"],"content":"变量 Python 中的变量不需要声明。每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建 在 Python 中，变量没有类型，我们所说的\"类型\"是变量所指的内存中对象的类型 ","date":"2022-04-28","objectID":"/posts/4.%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/:1:0","tags":["数据类型"],"title":"4.基本数据类型","uri":"/posts/4.%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"},{"categories":["Python"],"content":"标准数据类型 不可变数据： Number（数字） String（字符串） Tuple（元组） 可变数据： List（列表） Set（集合） Dictionary（字典） 如果改变数据类型的值，将重新分配内存空间 ","date":"2022-04-28","objectID":"/posts/4.%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/:2:0","tags":["数据类型"],"title":"4.基本数据类型","uri":"/posts/4.%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"},{"categories":["Python"],"content":"判断数据类型 type()： 语法： type(object) type(name, bases, dict, **kwds) 用法：https://docs.python.org/3/library/functions.html#type \u003e\u003e\u003e a,b,c,d = 20,5.5,True,4+3j \u003e\u003e\u003e print(type(a),type(b),type(c),type(d)) \u003cclass 'int'\u003e \u003cclass 'float'\u003e \u003cclass 'bool'\u003e \u003cclass 'complex'\u003e isinstance()： 语法：isinstance(object,classinfo) 用法：https://docs.python.org/3/library/functions.html#isinstance \u003e\u003e\u003e a = 111 \u003e\u003e\u003e isinstance(a, int) True isinstance()和type()的区别在于： type()不会认为子类是一种父类类型，不考虑继承关系 isinstance()会认为子类是一种父类类型，考虑继承关系 \u003e\u003e\u003e class A: ... pass ... \u003e\u003e\u003e class B(A): ... pass ... \u003e\u003e\u003e isinstance(A(), A) True \u003e\u003e\u003e type(A()) == A True \u003e\u003e\u003e isinstance(B(), A) True \u003e\u003e\u003e type(B()) == A False ","date":"2022-04-28","objectID":"/posts/4.%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/:3:0","tags":["数据类型"],"title":"4.基本数据类型","uri":"/posts/4.%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"},{"categories":["Python"],"content":"编码 默认情况下，Python 3 源码文件以 UTF-8 编码，所有字符串都是 Unicode 字符串 ","date":"2022-04-25","objectID":"/posts/3.%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/:1:0","tags":["语法"],"title":"3.基础语法","uri":"/posts/3.%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"},{"categories":["Python"],"content":"标识符 第一个字符必须是字母表中字母或下划线_ 标识符的其他的部分由字母、数字和下划线_组成 标识符对大小写敏感 在Python3中，可以用中文作为变量名，非 ASCII 标识符也是允许的 Python可以同一行显示多条语句，方法是用分号;分开 ","date":"2022-04-25","objectID":"/posts/3.%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/:2:0","tags":["语法"],"title":"3.基础语法","uri":"/posts/3.%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"},{"categories":["Python"],"content":"Python保留字 保留字即关键字，我们不能把它们用作任何标识符名称 Python的标准库提供了一个keyword模块，可以输出当前版本的所有关键字 \u003e\u003e\u003e import keyword \u003e\u003e\u003e keyword.kwlist ['False', 'None', 'True', '__peg_parser__', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield'] ","date":"2022-04-25","objectID":"/posts/3.%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/:3:0","tags":["语法"],"title":"3.基础语法","uri":"/posts/3.%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"},{"categories":["Python"],"content":"注释 单行注释以#开头 多行注释可以用多个#号，还有'''和\"\"\" # 注释1 # 注释2 ''' 注释块1 ''' \"\"\" 注释块2 \"\"\" ","date":"2022-04-25","objectID":"/posts/3.%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/:4:0","tags":["语法"],"title":"3.基础语法","uri":"/posts/3.%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"},{"categories":["Python"],"content":"行和缩进 Python最具特色的就是使用缩进来表示代码块，不需要使用大括号{} 缩进的空格数是可变的，但是同一个代码块的语句必须包含相同的缩进空格数 ","date":"2022-04-25","objectID":"/posts/3.%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/:5:0","tags":["语法"],"title":"3.基础语法","uri":"/posts/3.%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"},{"categories":["Python"],"content":"多行语句 多行连接符：\\ \u003e\u003e\u003e str = \"item_one \" + \\ ... \"item_two \" + \\ ... \"item_three\" \u003e\u003e\u003e \u003e\u003e\u003e print(str) item_one item_two item_three 语句中包含[],{}或()括号就不需要使用多行连接符 \u003e\u003e\u003e days = ['Monday', 'Tuesday', 'Wednesday','Thursday', 'Friday'] \u003e\u003e\u003e print(days) ['Monday', 'Tuesday', 'Wednesday', 'Thursday','Friday'] ","date":"2022-04-25","objectID":"/posts/3.%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/:6:0","tags":["语法"],"title":"3.基础语法","uri":"/posts/3.%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"},{"categories":["Python"],"content":"空行 函数之间或类的方法之间用空行分隔，表示一段新的代码的开始。类和函数入口之间也用一行空行分隔，以突出函数入口的开始 空行与代码缩进不同，空行并不是 Python 语法的一部分。书写时不插入空行，Python 解释器运行也不会出错 但是空行的作用在于分隔两段不同功能或含义的代码，便于日后代码的维护或重构 记住：空行也是程序代码的一部分 ","date":"2022-04-25","objectID":"/posts/3.%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/:7:0","tags":["语法"],"title":"3.基础语法","uri":"/posts/3.%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"},{"categories":["Python"],"content":"同一行使用多条语句 Python 可以在同一行中使用多条语句，语句之间使用分号;分割 ","date":"2022-04-25","objectID":"/posts/3.%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/:8:0","tags":["语法"],"title":"3.基础语法","uri":"/posts/3.%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"},{"categories":["Python"],"content":"多个语句构成代码组 缩进相同的一组语句构成一个代码块，我们称之代码组 像if、while、def和class这样的复合语句，首行以关键字开始，以冒号:结束，该行之后的一行或多行代码构成代码组 我们将首行及后面的代码组称为一个子句(clause) if expression : suite elif expression : suite else : suite ","date":"2022-04-25","objectID":"/posts/3.%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/:9:0","tags":["语法"],"title":"3.基础语法","uri":"/posts/3.%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"},{"categories":["Python"],"content":"print输出 print 默认输出是换行的，如果要实现不换行需要设置参数end=\"\"，参数默认值为end=\"\\n\" \u003e\u003e\u003e x = 1 \u003e\u003e\u003e y = 2 \u003e\u003e\u003e print(x);print(y) 1 2 \u003e\u003e\u003e print(x,end=\"\");print(y,end=\"\") 12\u003e\u003e\u003e ","date":"2022-04-25","objectID":"/posts/3.%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/:10:0","tags":["语法"],"title":"3.基础语法","uri":"/posts/3.%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"},{"categories":["Python"],"content":"import 与 from…import 在 Python 用import或者from...import来导入相应的模块 将整个模块(somemodule)导入，格式为：import somemodule 从某个模块中导入某个函数,格式为：from somemodule import somefunction 从某个模块中导入多个函数,格式为：from somemodule import firstfunc, secondfunc, thirdfunc 将某个模块中的全部函数导入，格式为： from somemodule import * ","date":"2022-04-25","objectID":"/posts/3.%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/:11:0","tags":["语法"],"title":"3.基础语法","uri":"/posts/3.%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"},{"categories":["Python"],"content":"命令行参数 Python 可以使用-h参数查看各参数帮助信息 ","date":"2022-04-25","objectID":"/posts/3.%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/:12:0","tags":["语法"],"title":"3.基础语法","uri":"/posts/3.%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"},{"categories":["Python"],"content":"删除对象 可以使用del语句删除一些对象 语法：del var1[,var2[,var3[....,varN]]] del var del var1,var2 ","date":"2022-04-25","objectID":"/posts/3.%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/:13:0","tags":["语法"],"title":"3.基础语法","uri":"/posts/3.%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"},{"categories":["Python"],"content":"下载 官网：https://www.python.org/ ","date":"2022-04-25","objectID":"/posts/2.%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83/:1:0","tags":["安装"],"title":"2.搭建环境","uri":"/posts/2.%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83/"},{"categories":["Python"],"content":"安装 Windows： 直接使用Windows版本安装 Linux： 建议使用源码 # ./configure # make \u0026\u0026 make install ","date":"2022-04-25","objectID":"/posts/2.%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83/:2:0","tags":["安装"],"title":"2.搭建环境","uri":"/posts/2.%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83/"},{"categories":["Python"],"content":"设置环境变量 Windows： DOS命令： \u003e path=%path%;C:\\Python 打开 控制面板 添加环境变量 Linux： # export PATH=\"$PATH:/usr/local/bin/python\" ","date":"2022-04-25","objectID":"/posts/2.%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83/:3:0","tags":["安装"],"title":"2.搭建环境","uri":"/posts/2.%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83/"},{"categories":["Python"],"content":"下载IDE PyCharm下载地址：https://www.jetbrains.com/pycharm/download/ VSCode下载地址：https://code.visualstudio.com/ ","date":"2022-04-25","objectID":"/posts/2.%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83/:4:0","tags":["安装"],"title":"2.搭建环境","uri":"/posts/2.%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83/"},{"categories":["Python"],"content":"基本语法 在Linux中： #! /usr/bin/python3 #指定解释器为python3 ","date":"2022-04-25","objectID":"/posts/1.%E6%8C%87%E5%AE%9A%E8%A7%A3%E9%87%8A%E5%99%A8/:1:0","tags":["Python","解释器"],"title":"1.指定解释器","uri":"/posts/1.%E6%8C%87%E5%AE%9A%E8%A7%A3%E9%87%8A%E5%99%A8/"},{"categories":null,"content":"About me Graduated from Panzhihua University. Major in Software Engineering. ","date":"0001-01-01","objectID":"/about/:0:0","tags":null,"title":"","uri":"/about/"}]