<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>语法 - 标签 -</title><link>https://nathanielgnef.github.io/tags/%E8%AF%AD%E6%B3%95/</link><description>语法 - 标签 -</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>aquilah@aliyun.com (NathanielGnef)</managingEditor><webMaster>aquilah@aliyun.com (NathanielGnef)</webMaster><lastBuildDate>Mon, 25 Apr 2022 16:53:28 +0800</lastBuildDate><atom:link href="https://nathanielgnef.github.io/tags/%E8%AF%AD%E6%B3%95/" rel="self" type="application/rss+xml"/><item><title>3.基础语法</title><link>https://nathanielgnef.github.io/posts/3.%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</link><pubDate>Mon, 25 Apr 2022 16:53:28 +0800</pubDate><author>aquilah@aliyun.com (NathanielGnef)</author><guid>https://nathanielgnef.github.io/posts/3.%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</guid><description><![CDATA[<h2 id="编码">编码</h2>
<p>默认情况下，Python 3 源码文件以 UTF-8 编码，所有字符串都是 Unicode 字符串</p>
<h2 id="标识符">标识符</h2>
<ul>
<li>第一个字符必须是字母表中字母或下划线<code>_</code></li>
<li>标识符的其他的部分由字母、数字和下划线<code>_</code>组成</li>
<li>标识符对大小写敏感</li>
</ul>
<p>在Python3中，可以用中文作为变量名，非 ASCII 标识符也是允许的</p>
<p>Python可以同一行显示多条语句，方法是用分号<code>;</code>分开</p>
<h2 id="python保留字">Python保留字</h2>
<p>保留字即关键字，我们不能把它们用作任何标识符名称
Python的标准库提供了一个keyword模块，可以输出当前版本的所有关键字</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">        <span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">keyword</span>
</span></span><span class="line"><span class="cl">        <span class="o">&gt;&gt;&gt;</span> <span class="n">keyword</span><span class="o">.</span><span class="n">kwlist</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="s1">&#39;False&#39;</span><span class="p">,</span> <span class="s1">&#39;None&#39;</span><span class="p">,</span> <span class="s1">&#39;True&#39;</span><span class="p">,</span> <span class="s1">&#39;__peg_parser__&#39;</span><span class="p">,</span> <span class="s1">&#39;and&#39;</span><span class="p">,</span> <span class="s1">&#39;as&#39;</span><span class="p">,</span> <span class="s1">&#39;assert&#39;</span><span class="p">,</span> <span class="s1">&#39;async&#39;</span><span class="p">,</span> <span class="s1">&#39;await&#39;</span><span class="p">,</span> <span class="s1">&#39;break&#39;</span><span class="p">,</span> <span class="s1">&#39;class&#39;</span><span class="p">,</span> <span class="s1">&#39;continue&#39;</span><span class="p">,</span> <span class="s1">&#39;def&#39;</span><span class="p">,</span> <span class="s1">&#39;del&#39;</span><span class="p">,</span> <span class="s1">&#39;elif&#39;</span><span class="p">,</span> <span class="s1">&#39;else&#39;</span><span class="p">,</span> <span class="s1">&#39;except&#39;</span><span class="p">,</span> <span class="s1">&#39;finally&#39;</span><span class="p">,</span> <span class="s1">&#39;for&#39;</span><span class="p">,</span> <span class="s1">&#39;from&#39;</span><span class="p">,</span> <span class="s1">&#39;global&#39;</span><span class="p">,</span> <span class="s1">&#39;if&#39;</span><span class="p">,</span> <span class="s1">&#39;import&#39;</span><span class="p">,</span> <span class="s1">&#39;in&#39;</span><span class="p">,</span> <span class="s1">&#39;is&#39;</span><span class="p">,</span> <span class="s1">&#39;lambda&#39;</span><span class="p">,</span> <span class="s1">&#39;nonlocal&#39;</span><span class="p">,</span> <span class="s1">&#39;not&#39;</span><span class="p">,</span> <span class="s1">&#39;or&#39;</span><span class="p">,</span> <span class="s1">&#39;pass&#39;</span><span class="p">,</span> <span class="s1">&#39;raise&#39;</span><span class="p">,</span> <span class="s1">&#39;return&#39;</span><span class="p">,</span> <span class="s1">&#39;try&#39;</span><span class="p">,</span> <span class="s1">&#39;while&#39;</span><span class="p">,</span> <span class="s1">&#39;with&#39;</span><span class="p">,</span> <span class="s1">&#39;yield&#39;</span><span class="p">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="注释">注释</h2>
<ul>
<li>单行注释以#开头</li>
<li>多行注释可以用多个<code>#</code>号，还有<code>'''</code>和<code>&quot;&quot;&quot;</code></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">        <span class="c1"># 注释1</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># 注释2</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;&#39;&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1">        注释块1
</span></span></span><span class="line"><span class="cl"><span class="s1">        &#39;&#39;&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">        注释块2
</span></span></span><span class="line"><span class="cl"><span class="s2">        &#34;&#34;&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="行和缩进">行和缩进</h2>
<p>Python最具特色的就是使用缩进来表示代码块，不需要使用大括号{}<br>
缩进的空格数是可变的，但是同一个代码块的语句必须包含相同的缩进空格数</p>
<h2 id="多行语句">多行语句</h2>
<ol>
<li>多行连接符：<code>\</code></li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">        <span class="o">&gt;&gt;&gt;</span> <span class="nb">str</span> <span class="o">=</span> <span class="s2">&#34;item_one &#34;</span> <span class="o">+</span> \
</span></span><span class="line"><span class="cl">        <span class="o">...</span>       <span class="s2">&#34;item_two &#34;</span> <span class="o">+</span> \
</span></span><span class="line"><span class="cl">        <span class="o">...</span>       <span class="s2">&#34;item_three&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="o">&gt;&gt;&gt;</span> 
</span></span><span class="line"><span class="cl">        <span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span><span class="p">(</span><span class="nb">str</span><span class="p">)</span>        
</span></span><span class="line"><span class="cl">        <span class="n">item_one</span> <span class="n">item_two</span> <span class="n">item_three</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ol start="2">
<li>语句中包含<code>[]</code>,<code>{}</code>或<code>()</code>括号就不需要使用多行连接符</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">        <span class="o">&gt;&gt;&gt;</span> <span class="n">days</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;Monday&#39;</span><span class="p">,</span> <span class="s1">&#39;Tuesday&#39;</span><span class="p">,</span> <span class="s1">&#39;Wednesday&#39;</span><span class="p">,</span><span class="s1">&#39;Thursday&#39;</span><span class="p">,</span> <span class="s1">&#39;Friday&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span><span class="p">(</span><span class="n">days</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="s1">&#39;Monday&#39;</span><span class="p">,</span> <span class="s1">&#39;Tuesday&#39;</span><span class="p">,</span> <span class="s1">&#39;Wednesday&#39;</span><span class="p">,</span> <span class="s1">&#39;Thursday&#39;</span><span class="p">,</span><span class="s1">&#39;Friday&#39;</span><span class="p">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="空行">空行</h2>
<p>函数之间或类的方法之间用空行分隔，表示一段新的代码的开始。类和函数入口之间也用一行空行分隔，以突出函数入口的开始<br>
空行与代码缩进不同，空行并不是 Python 语法的一部分。书写时不插入空行，Python 解释器运行也不会出错<br>
但是空行的作用在于分隔两段不同功能或含义的代码，便于日后代码的维护或重构<br>
<strong>记住</strong>：空行也是程序代码的一部分</p>
<h2 id="同一行使用多条语句">同一行使用多条语句</h2>
<p>Python 可以在同一行中使用多条语句，语句之间使用分号<code>;</code>分割</p>
<h2 id="多个语句构成代码组">多个语句构成代码组</h2>
<p>缩进相同的一组语句构成一个代码块，我们称之代码组<br>
像<code>if</code>、<code>while</code>、<code>def</code>和<code>class</code>这样的复合语句，首行以关键字开始，以冒号<code>:</code>结束，该行之后的一行或多行代码构成代码组<br>
我们将首行及后面的代码组称为一个子句(clause)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">expression</span> <span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">suite</span>
</span></span><span class="line"><span class="cl">        <span class="k">elif</span> <span class="n">expression</span> <span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">suite</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">suite</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="print输出">print输出</h2>
<p>print 默认输出是换行的，如果要实现不换行需要设置参数<code>end=&quot;&quot;</code>，参数默认值为<code>end=&quot;\n&quot;</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">        <span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">        <span class="o">&gt;&gt;&gt;</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">2</span> 
</span></span><span class="line"><span class="cl">        <span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">);</span><span class="nb">print</span><span class="p">(</span><span class="n">y</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="mi">1</span>
</span></span><span class="line"><span class="cl">        <span class="mi">2</span>
</span></span><span class="line"><span class="cl">        <span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">end</span><span class="o">=</span><span class="s2">&#34;&#34;</span><span class="p">);</span><span class="nb">print</span><span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="n">end</span><span class="o">=</span><span class="s2">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="mi">12</span><span class="o">&gt;&gt;&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="import-与-fromimport">import 与 from&hellip;import</h2>
<p>在 Python 用<code>import</code>或者<code>from...import</code>来导入相应的模块
将整个模块(somemodule)导入，格式为：<code>import somemodule</code><br>
从某个模块中导入某个函数,格式为：<code>from somemodule import somefunction</code>
从某个模块中导入多个函数,格式为：<code>from somemodule import firstfunc, secondfunc, thirdfunc</code><br>
将某个模块中的全部函数导入，格式为： <code>from somemodule import *</code></p>
<h2 id="命令行参数">命令行参数</h2>
<p>Python 可以使用<code>-h</code>参数查看各参数帮助信息</p>
<h2 id="删除对象">删除对象</h2>
<p>可以使用<code>del</code>语句删除一些对象
语法：<code>del var1[,var2[,var3[....,varN]]]</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">    <span class="k">del</span> <span class="n">var</span>
</span></span><span class="line"><span class="cl">    <span class="k">del</span> <span class="n">var1</span><span class="p">,</span><span class="n">var2</span>
</span></span></code></pre></td></tr></table>
</div>
</div>]]></description></item></channel></rss>